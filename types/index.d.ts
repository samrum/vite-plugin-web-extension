import type { Plugin, ChunkMetadata, FilterPattern } from "vite";

type WebAccessibleDefinition =
  | {
      matches: string[];
      extension_ids?: string[];
      use_dynamic_url?: boolean;
    }
  | {
      matches?: string[];
      extension_ids: string[];
      use_dynamic_url?: boolean;
    };

type AdditionalInput =
  | string
  | {
      fileName: string;
      webAccessible?: boolean | WebAccessibleDefinition;
      isEntryWebAccessible?: boolean;
    };

interface ViteWebExtensionOptions {
  /**
   * The manifest file to use as a base for the generated extension
   */
  manifest: chrome.runtime.Manifest;

  /**
   * In dev mode, apply Vite plugins to manifest HTML files by calling transformIndexHtml on them
   * Default: false
   */
  devHtmlTransform?: boolean;

  /**
   * Sets the use_dynamic_url property on web accessible resources generated by the plugin
   * Default: true
   */
  useDynamicUrlContentScripts?: boolean;

  /**
   * Additional input files that should be processed and treated as web extension inputs.
   * Useful for dynamically injected scripts and dynamically opened HTML pages.
   * The webAccessible option configures whether the input file's dependencies are included in `web_accessible_resources`. Defaults to true and `matches: [<all_urls>]`.
   * The isEntryWebAccessible option configures whether the input file itself is included in `web_accessible_resources`. Defaults to false.
   */
  additionalInputs?: {
    scripts?: AdditionalInput[];
    html?: AdditionalInput[];
    styles?: AdditionalInput[];
  };
}

/**
 * Build cross platform, module-based web extensions using vite
 */
export default function webExtension(options?: ViteWebExtensionOptions): Plugin;
